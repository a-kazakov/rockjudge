import json
import rsa
import base64
import textwrap


try:
    from .keys import KEYS
except ImportError:
    KEYS = {
        "private": rsa.PrivateKey
        "public": rsa.PublicKey(641142115493706131834127449919397401375980381605954908775318370125615542305155077354948732198618185209552856502721755868074651900708186610994618855067750785887712762965997044264934027192682448807083804155588766295914122152805370578005200524979501946932828846224565525430574504577647404217174356918719121535821410371883583397139521784989280125382583468764402543364687560288352303874816858644451256306208390866758601724955948992658446105118256829549111877765146625841483710267109847778558567132917457590349697015854509883070432804187902485621767709830388117389765599969911069050850498660881175876251002423076542582442250099439421998629065510658437836264484034507756373626417507199828343442312138553045257748875247414453129181869972417290616635385544756997266190572419481081482151720202565510610955034780506052622103840725284644825832811744760037598223905187891354373628409224896520212754111597602060828148405815399935005299269033922453370746866700715071768538726230280238587720504910676563213196327456133332852553733124882522877219429944212411300618565356384676854971590337290388834856906539618556831846623428170621820510201509229952182954258169347149026354139744519008274041343659626372656304595440027440037305711579228959416779136241, 65537),
    }


def sign(struct):
    if "private" not in KEYS:
        raise RuntimeError("Unable to sign: no private key found")
    serialized = json.dumps(struct, sort_keys=True)
    sig = base64.b64encode(rsa.sign(serialized.encode(), KEYS["private"], "SHA-512")).decode()
    struct["signature"] = sig
    return struct


def verify(struct):
    try:
        sig = struct.pop("signature")
        serialized = json.dumps(struct, sort_keys=True)
        return rsa.verify(serialized.encode(), base64.b64decode(sig), KEYS["public"])
    except:
        return False


def encode(struct):
    struct = sign(struct)
    tmp = json.dumps(struct, ensure_ascii=False).encode("utf-8")
    tmp = bytes(x ^ (idx ** 97 % 255) for idx, x in enumerate(tmp, start=1))
    tmp = base64.b64encode(tmp)
    result = "\n".join(textwrap.wrap(tmp.decode(), 80))
    return result


def decode(encoded):
    try:
        tmp = encoded.replace("\n", "").replace("\r", "")
        tmp = tmp.encode()
        tmp = base64.b64decode(tmp)
        tmp = bytes(x ^ (idx ** 97 % 255) for idx, x in enumerate(tmp, start=1))
        struct = json.loads(tmp.decode("utf-8"))
        if not verify(struct):
            return None
        return struct
    except:
        return None
