import base64
import json
from typing import Any

import rsa


KEYS = {
    "public": rsa.PublicKey
}


def verify(struct):
    try:
        sig = struct.pop("signature")
        serialized = json.dumps(struct, sort_keys=True)
        return rsa.verify(serialized.encode(), base64.b64decode(sig), KEYS["public"])
    except:
        return False


def decode(encoded: str) -> Any:
    try:
        tmp = encoded.replace("\n", "").replace("\r", "")
        tmp = tmp.encode("utf-8")
        tmp = base64.b64decode(tmp)
        tmp = bytes(x ^ (idx ** 97 % 255) for idx, x in enumerate(tmp, start=1))
        struct = json.loads(tmp.decode("utf-8"))
        if not verify(struct):
            return None
        return struct
    except Exception:
        return None
